import { EditorNode, SerializeOptions, Serializable } from './StructureNodes';
import { SchemaType } from './parts/Schema';
interface EditorOptions {
    id: string;
    type: string;
    template?: string;
    templateParameters?: {
        [key: string]: any;
    };
}
export declare type PartialEditorNode = {
    id?: string;
    title?: string;
    options?: Partial<EditorOptions>;
};
export declare class EditorBuilder implements Serializable {
    protected spec: PartialEditorNode;
    constructor(spec?: EditorNode);
    id(id: string): EditorBuilder;
    getId(): string | undefined;
    title(title: string): EditorBuilder;
    getTitle(): string | undefined;
    documentId(documentId: string): EditorBuilder;
    getDocumentId(): string | undefined;
    schemaType(documentType: SchemaType | string): EditorBuilder;
    getSchemaType(): string | undefined;
    initialValueTemplate(templateId: string, parameters?: {
        [key: string]: any;
    }): EditorBuilder;
    getInitalValueTemplate(): string | undefined;
    getInitialValueTemplateParameters(): {
        [key: string]: any;
    } | undefined;
    serialize({ path, index, hint }?: SerializeOptions): EditorNode;
    clone(withSpec?: PartialEditorNode): EditorBuilder;
}
export declare function editorWithInitialValueTemplate(templateId: string, parameters?: {
    [key: string]: any;
}): EditorBuilder;
export {};
