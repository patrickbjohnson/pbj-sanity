"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _eventsource = _interopRequireDefault(require("@sanity/eventsource"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isWindowEventSource = Boolean(typeof window !== 'undefined' && window.EventSource);
var EventSource = isWindowEventSource ? window.EventSource // Native browser EventSource
: _eventsource.default; // Node.js, IE, Edge etc

var STATE_CONNECTING = 0;
var STATE_OPEN = 1;

class DevServerStatus extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleOpen", () => {
      this.handleReadyChange();

      if (this.state.hasHadConnection) {
        // We reconnected after being disconnected.
        // Hot-reloading won't be applied automatically.
        // We should consider showing a message telling the user to reload,
        // or just programatically reload the page:
        window.location.reload();
      } else {
        this.setState({
          hasHadConnection: true
        });
      }
    });

    _defineProperty(this, "handleReadyChange", () => {
      this.setState({
        connectionState: this.es.readyState
      });
    });

    this.enabled = __DEV__ && EventSource;
    this.state = {
      connectionState: STATE_CONNECTING,
      hasHadConnection: false
    };
  }

  componentDidMount() {
    if (!this.enabled) {
      return;
    }

    this.es = new EventSource('/__webpack_hmr');
    this.es.onerror = this.handleReadyChange;
    this.es.onopen = this.handleOpen;
  }

  componentWillUnmount() {
    if (this.es) {
      this.es.close();
    }
  }

  render() {
    // We're in production, or eventsource is not supported by the browser (Edge)
    if (!this.enabled) {
      return null;
    } // We're connected, don't show anything


    if (this.state.connectionState === STATE_OPEN) {
      return null;
    } // We are disconnected


    if (this.state.hasHadConnection) {
      return _react.default.createElement(_default2.default, {
        id: "__dev-server-status",
        kind: "warning",
        isPersisted: true,
        isCloseable: false,
        title: _react.default.createElement("strong", null, "Disconnected from the dev server!"),
        subtitle: _react.default.createElement("div", null, "To see your latest changes, restart the Studio with ", _react.default.createElement("code", null, "sanity start"), " in your project folder.")
      });
    }

    return null;
  }

}

var _default = DevServerStatus;
exports.default = _default;