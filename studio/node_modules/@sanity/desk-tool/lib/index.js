"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _viewColumnIcon = _interopRequireDefault(require("part:@sanity/base/view-column-icon"));

var _router = require("part:@sanity/base/router");

var _DeskTool = _interopRequireDefault(require("./DeskTool"));

var _parsePanesSegment = require("./utils/parsePanesSegment");

var _uuid = _interopRequireDefault(require("@sanity/uuid"));

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function maybeRemapStringSegment(segment) {
  return typeof segment === 'string' ? {
    id: segment
  } : segment;
}

function encodeSegment(_ref) {
  var id = _ref.id,
      params = _ref.params;
  var parts = params ? [id, JSON.stringify(params)] : [id];
  return parts.join(',');
}

function toState(pathSegment) {
  return (0, _parsePanesSegment.parsePanesSegment)(decodeURIComponent(pathSegment));
}

function toPath(panes) {
  return panes.map(maybeRemapStringSegment).map(encodeSegment).map(encodeURIComponent).join(';');
}

function paramsToState(params) {
  try {
    return JSON.parse(decodeURIComponent(params));
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn('Failed to parse JSON parameters');
    return {};
  }
}

function paramsToPath(params) {
  return JSON.stringify(params);
}

var state = {
  activePanes: []
};

function setActivePanes(panes) {
  state.activePanes = panes;
}

function DeskToolPaneStateSyncer(props) {
  return _react.default.createElement(_DeskTool.default, _extends({}, props, {
    onPaneChange: setActivePanes
  }));
}

function getIntentState(intentName, params, currentState) {
  var jsonParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var paneSegments = currentState && currentState.panes || [];
  var activePanes = state.activePanes || [];
  var editDocumentId = params.id || (0, _uuid.default)();
  var isTemplate = intentName === 'create' && params.template; // Loop through open panes and see if any of them can handle the intent

  for (var i = activePanes.length - 1; i >= 0; i--) {
    var pane = activePanes[i];

    if (pane.canHandleIntent && pane.canHandleIntent(intentName, params, {
      pane
    })) {
      var paneParams = isTemplate ? _objectSpread({
        template: params.template
      }, jsonParams) : undefined;
      return {
        panes: paneSegments.slice(0, i).concat({
          id: editDocumentId,
          params: paneParams
        })
      };
    }
  }

  return getFallbackIntentState({
    documentId: editDocumentId,
    intentName,
    params,
    jsonParams
  });
}

function getFallbackIntentState(_ref2) {
  var documentId = _ref2.documentId,
      intentName = _ref2.intentName,
      params = _ref2.params,
      _ref2$jsonParams = _ref2.jsonParams,
      jsonParams = _ref2$jsonParams === void 0 ? {} : _ref2$jsonParams;
  var editDocumentId = documentId;
  var isTemplateCreate = intentName === 'create' && params.template;
  var template = isTemplateCreate && (0, _initialValueTemplates.getTemplateById)(params.template);
  return isTemplateCreate ? {
    editDocumentId,
    type: template.schemaType,
    params: _objectSpread({
      template: params.template
    }, jsonParams)
  } : {
    editDocumentId,
    type: params.type || '*'
  };
}

var _default = {
  router: (0, _router.route)('/', [// Fallback route if no panes can handle intent
  (0, _router.route)('/edit/:type/:editDocumentId', [(0, _router.route)({
    path: '/:params',
    transform: {
      params: {
        toState: paramsToState,
        toPath: paramsToPath
      }
    }
  })]), // The regular path - when the intent can be resolved to a specific pane
  (0, _router.route)({
    path: '/:panes',
    // Legacy URLs, used to handle redirects
    children: [(0, _router.route)('/:action', (0, _router.route)('/:legacyEditDocumentId'))],
    transform: {
      panes: {
        toState,
        toPath
      }
    }
  })]),

  canHandleIntent(intentName, params) {
    return intentName === 'edit' && params.id || intentName === 'create' && params.type || intentName === 'create' && params.template;
  },

  getIntentState,
  title: 'Desk',
  name: 'desk',
  icon: _viewColumnIcon.default,
  component: DeskToolPaneStateSyncer
};
exports.default = _default;