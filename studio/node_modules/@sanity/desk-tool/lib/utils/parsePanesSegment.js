"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parsePanesSegment = parsePanesSegment;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-disable import/prefer-default-export */
var panePattern = /^([a-z0-9_-]+),?({.*?})?(?:(;|$))/i;

function parsePanesSegment(str) {
  var chunks = [];
  var buffer = str;

  while (buffer.length) {
    var _ref = buffer.match(panePattern) || [],
        _ref2 = _slicedToArray(_ref, 3),
        match = _ref2[0],
        id = _ref2[1],
        paramsChunk = _ref2[2];

    if (!match) {
      buffer = buffer.slice(1);
      continue;
    }

    var params = paramsChunk && tryParseParams(paramsChunk);
    chunks.push({
      id,
      params
    });
    buffer = buffer.slice(match.length);
  }

  return chunks;
}

function tryParseParams(json) {
  try {
    return JSON.parse(json);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn("Failed to parse parameters: ".concat(err.message));
    return undefined;
  }
}